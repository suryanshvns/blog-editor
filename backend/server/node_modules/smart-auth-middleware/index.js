const Logger = require('smart-node-logger');
const { authPreCheck, jwtVerify, authPostCheck } = require('./lib');

const middleware = (config) => (req, res, next) => {
  const logger = new Logger(req);
  const { ignorePaths } = config || { };
  const ignorePath = ignorePaths || [ '/ping', '/healthcheck' ];
  const { originalUrl } = req;

  if (!config) {
    logger.log({
      level: 'error',
      meta: {
        message: 'unexpected-internal-server-error',
        details: '`config` is missing as middleware arguments. Please refer readme.md file for better clarity',
      },
    });

    return res.status(500).json({
      type: 'unexpected-internal-server-error',
      correlationId: req['x-coreplatform-correlationid'],
      details: [
        {
          name: 'unexpected-server-error',
          messages: [ 'Please contact administrator and present correlation identifier for troubleshooting' ],
        },
      ],
    });
  }

  const isIgnoredPath = ignorePath.some((element) => {
    const paths = element.split('/');
    const originalPaths = originalUrl.split('/');

    if (paths.length === originalPaths.length) {
      const isMatch = originalPaths.every((element1, index) => {
        const path = paths[index];
        const queryPath = element1.split('?')[0];

        if (path.charAt(0) === ':') {
          return true;
        }
        if (path === element1) {
          return true;
        }
        if (path === queryPath) {
          return true;
        }

        return false;
      });

      return isMatch;
    }

    return false;
  });

  if (isIgnoredPath && !req.headers.authorization) {
    return next();
  }

  return authPreCheck(config, () => {
    jwtVerify(config)(req, res, authPostCheck(req, res, next, config));
  })(req, res);
};

module.exports = middleware;
