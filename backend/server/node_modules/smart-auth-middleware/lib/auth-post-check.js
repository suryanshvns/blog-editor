const Logger = require('smart-node-logger');
const { Authorization } = require('./utils/helpers');

const authPostCheck = (req, res, next, config = { AUDIENCE: 'platform' }) => async (error) => {
  const logger = new Logger(req);

  // unauthorized or 401 exception thrown by jwt middleware
  if (error && error.name === 'UnauthorizedError') {
    return res.status(401).json(error);
  }

  const { user } = req;

  if (user && Object.keys(user).length) {
    const { aud: claims } = user;

    if (claims.indexOf(config.AUDIENCE) > -1) {
      const { AUTHORIZATION_URL } = config;

      if (AUTHORIZATION_URL) {
        const { errors } = await Authorization({
          url: AUTHORIZATION_URL, data: req.body, headers: req.headers,
        });

        if (errors) {
          return res.status(403).json();
        }

        return next();
      }

      return next();
    }
  }

  logger.log({
    level: 'error',
    meta: {
      message: 'unexpected-internal-server-error',
      details: 'un-availability of IDS microservice.',
    },
  });

  return res.status(401).json();
};

module.exports = authPostCheck;
