const chai = require('chai');
const sinon = require('sinon');
const { authPreCheck, authPostCheck } = require('../lib');

const authentication = require('../');
const Authorization = require('../lib/utils/helpers');

const { expect } = chai;

const config = { IDENTITY_SERVICE_URL: 'http://abc.com' };

describe('Authentication middleware', () => {
  let response;
  let next;

  beforeEach(() => {
    response = {
      status: sinon.stub().returnsThis(),
      json: sinon.spy(),
    };
    next = sinon.spy();
  });

  context('Authentication Method', () => {
    it('should exports the function', () => {
      expect(typeof (authentication)).to.eq('function');
    });

    it('should throws error if config library is missing', () => {
      try {
        const request = {
          headers: {
            authorization: 'Bearer sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
            'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
            'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          },
          user: {
            tokenType: 'microservice',
            userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
          },
          path: '/ping',
          originalUrl: '/ping',
          hostname: 'example.com',
          userAgent: 'node-microservice',
          accessPermissions: null,
        };

        authentication()(request, response, next);
      } catch (error) {
        expect(error.toString()).to.deep.equal('Error: `config` is missing as middleware arguments. Please refer readme.md file for better clarity.');
      }
    });

    it('should return true when endpoint is /ping', () => {
      const request = {
        headers: {
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          tokenType: 'microservice',
          userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authentication(config)(request, response, next);

      expect(next.called).to.equal(true);
    });

    it('should return true middleware when endpoint is /healthcheck', () => {
      const request = {
        headers: {
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          tokenType: 'microservice',
          userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
        },
        path: '/healthcheck',
        originalUrl: '/healthcheck',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authentication(config)(request, response, next);

      expect(next.called).to.equal(true);
    });

    it('should return undefined when route is not a either /ping or /healthcheck', () => {
      const request = {
        headers: {
          authorization: 'Bearer sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          tokenType: 'microservice',
          userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
        },
        path: '/forms',
        originalUrl: '/forms',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      const trace = authentication(config)(request, response, next);

      expect(typeof trace).to.equal('undefined');
    });
  });

  context('authPreCheck Method validations', () => {
    beforeEach(() => {
      response = {
        status: sinon.stub().returnsThis(),
        json: sinon.spy(),
      };
      next = sinon.spy();
    });

    afterEach(() => sinon.restore());

    it('should be a equal to function', () => {
      expect(typeof (authPreCheck)).to.eq('function');
    });

    it('should return a function when its called', () => {
      expect(() => {
        authPreCheck(config);
      }).to.be.a('function');
    });

    it('should throw error when IDS_SERVICE_URL is undefined', () => {
      try {
        const request = {
          headers: {
            authorization: null,
          },
        };

        authPreCheck({})(request, response, next);
      } catch (error) {
        expect(error.toString()).to.deep.equal('Error: Exception raised:- Unable to get `IDS_SERVICE_URL` from configuration.');
      }
    });

    it('should throw TypeError if authorization is missing in headers', () => {
      try {
        const request = { headers: { } };

        authPreCheck(config)(request, response, next);
      } catch (error) {
        expect(error.toString()).to.deep.equal('TypeError: Cannot destructure property `authorization` of \'undefined\' or \'null\'.');
      }
    });

    it('should return false if authorization is empty|undefined|null ', () => {
      const request = {
        headers: {
          authorization: null,
        },
      };

      authPreCheck(config)(request, response, next);

      expect(next.called).to.be.false;
    });

    it('should return false if scheme is missing in authorization header', () => {
      const request = {
        headers: {
          authorization: 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
        },
      };

      authPreCheck(config)(request, response, next);

      expect(next.called).to.be.false;
    });

    it('should be a equal to function', () => {
      expect(typeof authPreCheck).to.equal('function');
    });

    it('should return a function when its called', () => {
      expect(() => {
        authPreCheck(config);
      }).to.be.a('function');
    });

    it('should throw error when config not passed as a parameter', () => {
      try {
        const request = {
          headers: {
            authorization: 'Bearer sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
            'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
            'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          },
          user: {
            tokenType: 'microservice',
            userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
          },
          path: '/ping',
          originalUrl: '/ping',
          hostname: 'example.com',
          userAgent: 'node-microservice',
          accessPermissions: null,
        };

        authPreCheck({})(request, response, next);
      } catch (error) {
        expect(error.toString()).to.deep.equal('Error: Exception raised:- Unable to get `URL_IDENTITY_SERVICE` from configuration.');
      }
    });

    it('should return 401 if authorization is null ', () => {
      const request = {
        headers: {
          authorization: null,
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          tokenType: 'microservice',
          userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPreCheck(config)(request, response, next);

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('should return 401 if authorization is empty string ', () => {
      const request = {
        headers: {
          authorization: '',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          tokenType: 'microservice',
          userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPreCheck(config)(request, response, next);

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('should return 401 if authorization is undefined ', () => {
      const request = {
        headers: {
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          tokenType: 'microservice',
          userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPreCheck(config)(request, response, next);

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('should return 401 if scheme is missing in authorization header', () => {
      const request = {
        headers: {
          authorization: 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          tokenType: 'microservice',
          userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPreCheck(config)(request, response, next);

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });
  });

  context('authPostCheck Method validations', async () => {
    let mockJWKSService;

    beforeEach(() => {
      response = {
        status: sinon.stub().returnsThis(),
        json: sinon.spy(),
      };
      next = sinon.spy();
    });

    afterEach(() => sinon.restore());

    it('should return 401 statusCode when error.name is UnauthorizedError', () => {
      authPostCheck({}, response, next)({ name: 'UnauthorizedError' });

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    // it('should call the next function when aud array contains the `platform` claims', () => {
    //   const request = {
    //     headers: {
    //       authorization: 'Bearer sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
    //       'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
    //       'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
    //     },
    //     user: {
    //       aud: ['platform'],
    //     },
    //     path: '/healthcheck',
    //     originalUrl: '/healthcheck',
    //     hostname: 'example.com',
    //     userAgent: 'node-microservice',
    //     accessPermissions: null,
    //   };

    //   authPostCheck(request, response, next);

    //   expect(next.called).to.equal(true);
    // });

    it('should return 401 status code when req.user is undefined', () => {
      const request = {
        headers: {
          authorization: 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPostCheck(request, response, next)({});

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('should return 401 status code when req.user is empty object', () => {
      const request = {
        headers: {
          authorization: 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {},
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPostCheck(request, response, next)({});

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('should return 401 status code when req.user.aud is empty object', () => {
      const request = {
        headers: {
          authorization: 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {},
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPostCheck(request, response, next)({});

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('should return 401 status code when req.user.aud.claims is empty object', () => {
      const request = {
        headers: {
          authorization: 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          aud: [],
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPostCheck(request, response, next)({});

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    before(async () => {
      mockJWKSService = sinon.stub(Authorization, 'Authorization');
      mockJWKSService.returns({ errors: [ { name: 'server', message: 'There is some issue, Please try after some time' } ] });
    });

    it('should return 403 status code when token is not correct', async () => {
      const request = {
        headers: {
          authorization: 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          tokenType: 'microservice',
          userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
          aud: [ 'platform' ],
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        'sub-domain': 'profile-service-dev',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      await authPostCheck(request, response, next, { AUTHORIZATION_URL: 'http://example.com/.well-known/oauth', AUDIENCE: 'platform' })({});

      expect(response.status.getCall(0).args[0]).to.equal(403);
    });

    afterEach(async () => {
      mockJWKSService.restore();
    });

    it('should call the next function when aud array contains the `platform` claims', () => {
      const request = {
        headers: {
          authorization: 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
          'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
        },
        user: {
          aud: [ 'platform' ],
        },
        path: '/ping',
        originalUrl: '/ping',
        hostname: 'example.com',
        userAgent: 'node-microservice',
        accessPermissions: null,
      };

      authPostCheck(request, response, next)({});

      expect(next.called).to.equal(true);
    });
  });

  it('should return true when endpoint exists is ingorePath', () => {
    const request = {
      headers: {
        'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
        'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
      },
      user: {
        tokenType: 'microservice',
        userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
      },
      path: '/user/1234',
      originalUrl: '/user/1234',
      hostname: 'example.com',
      userAgent: 'node-microservice',
      accessPermissions: null,
    };

    authentication({
      IDENTITY_SERVICE_URL: 'http://abc.com',
      ignorePaths: [ '/ping', '/healthcheck', '/user/:userId' ],
    })(request, response, next);

    expect(next.called).to.equal(true);
  });

  it('should return true when endpoint exists is ingorePath and have query params', () => {
    const request = {
      headers: {
        'x-coreplatform-tenantid': 'sdfafadsf87s8a9fa7f8saf789saf7s89af789saf',
        'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
      },
      path: '/requests/f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc/callback',
      originalUrl: '/requests/f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc/callback?esign=esign_fb5cce9bfef94e04a24102be0de5e06a&status=successful',
      hostname: 'example.com',
      userAgent: 'node-microservice',
      accessPermissions: null,
    };

    authentication({
      IDENTITY_SERVICE_URL: 'http://abc.com',
      ignorePaths: [ '/ping', '/healthcheck', '/requests/f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc/callback' ],
    })(request, response, next);

    expect(next.called).to.equal(true);
  });
});
