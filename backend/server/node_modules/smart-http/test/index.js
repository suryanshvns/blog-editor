const sinon = require('sinon');
const { expect } = require('chai');
const middleware = require('../index');

const noopFn = () => {};
const request = {
  headers: {
    'x-coreplatform-correlationid': 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
  },
  user: {
    tokenType: 'microservice',
    userid: '318ae80c-ab7d-11e8-98d0-529269fb1459',
  },
  path: '/forms',
  hostname: 'example.com',
  userAgent: 'node-microservice',
  accessPermissions: null,
};

describe('HTTP Error module', () => {
  let response;
  let next;

  beforeEach(() => {
    response = {
      status: sinon.stub().returnsThis(),
      json: sinon.stub().returnsThis(),
    };
    next = noopFn;
  });

  afterEach(() => sinon.restore());

  context('logger as a argument is missing', () => {
    it('should throw an error', () => {
      try {
        middleware()(request, response, next);
      } catch (e) {
        expect(e.toString()).deep.equal('Error: Logger as argument is missing');
      }
    });
  });

  context('badRequest method', () => {
    const badRequestDetails = [
      {
        name: 'FirstName',
        message: 'First name is required',
      },
      {
        name: 'EmailId',
        message: 'Email Id is required',
      },
    ];

    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.badRequest).not.to.be.undefined;
    });

    it('should return status 400', () => {
      middleware()(request, response, next);

      response.badRequest('business-validation', badRequestDetails);

      expect(response.status.getCall(0).args[0]).to.equal(400);
    });

    it('should return 400 response body as defined', () => {
      middleware()(request, response, next);

      response.badRequest('business-validation', badRequestDetails);

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'business-validation',
          details: badRequestDetails,
        },
      ]);
    });

    it('should return 400 response body as defined with statusCode in response', () => {
      middleware({ sendStatusCodeinRespose:true })(request, response, next);

      response.badRequest('business-validation', badRequestDetails);

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'business-validation',
          statusCode: 400,
          details: badRequestDetails,
        },
      ]);
    });

    it('should throw exception if name as a key is missing for response details', () => {
      try {
        middleware()(request, response, next);

        response.badRequest('business-validation', [
          {
            message: 'First name is required',
          },
        ]);
      } catch (error) {
        expect(error.toString()).to.deep.equal('Error: 4.x.x response body structure should follow the standards defined by eazyfin core team');
      }
    });

    it('should throw exception if message as key is missing for response details', () => {
      try {
        middleware()(request, response, next);

        response.badRequest('business-validation', [
          {
            name: 'FirstName',
          },
        ]);
      } catch (error) {
        expect(error.toString()).to.deep.equal('Error: 4.x.x response body structure should follow the standards defined by eazyfin core team');
      }
    });
  });

  context('unAuthorized method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.unAuthorized).not.to.be.undefined;
    });

    it('should return status 401', () => {
      middleware()(request, response, next);

      response.unAuthorized();

      expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('should return 401 response body as defined', () => {
      middleware()(request, response, next);

      response.unAuthorized();

      expect(response.json.args[0]).to.be.deep.equal([]);
    });

  });

  context('forbidden method', () => {

    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.forbidden).not.to.be.undefined;
    });

    it('should return status 403', () => {
      middleware()(request, response, next);

      response.forbidden();

      expect(response.status.getCall(0).args[0]).to.equal(403);
    });

    it('should return 403 response body as defined', () => {
      middleware()(request, response, next);

      response.forbidden();

      expect(response.json.args[0]).to.be.deep.equal([ ]);
    });

    it('should throw exception if name as a key is missing for response details', () => {
      try {
        middleware()(request, response, next);

        response.forbidden();
      } catch (error) {
        expect(error.toString()).to.deep.equal('Error: 4.x.x response body structure should follow the standards defined by eazyfin core team');
      }
    });

    it('should throw exception if message as key is missing for response details', () => {
      try {
        middleware()(request, response, next);

        response.forbidden();
      } catch (error) {
        expect(error.toString()).to.deep.equal('Error: 4.x.x response body structure should follow the standards defined by eazyfin core team');
      }
    });
  });

  context('notFound method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.notFound).not.to.be.undefined;
    });

    it('should return status 404', () => {
      middleware()(request, response, next);

      response.notFound();

      expect(response.status.getCall(0).args[0]).to.equal(404);
    });

    it('should return 404 response body as defined', () => {
      middleware()(request, response, next);

      response.notFound();

      expect(response.json.args[0]).to.be.deep.equal([]);
    });
  });

  context('concurrencyError method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.concurrencyError).not.to.be.undefined;
    });

    it('should return status 412', () => {
      middleware()(request, response, next);

      response.concurrencyError();

      expect(response.status.getCall(0).args[0]).to.equal(412);
    });

    it('should return 412 response body as defined', () => {
      middleware()(request, response, next);

      response.concurrencyError();

      expect(response.json.args[0]).to.be.deep.equal([]);
    });
  });

  context('serverError method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.serverError).not.to.be.undefined;
    });

    it('should return status 500', () => {
      middleware()(request, response, next);

      response.serverError();

      expect(response.status.getCall(0).args[0]).to.equal(500);
    });

    it('should return 500 response body as defined', () => {
      middleware()(request, response, next);

      response.serverError();

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'unexpected-internal-server-error',
          correlationId: 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          details: [
            {
              name: 'unexpected-server-error',
              message: 'Please contact administrator and present correlation identifier for troubleshooting',
            },
          ],
        },
      ]);
    });

    it('should return 500 response body as defined with statusCode', () => {
      middleware({ sendStatusCodeinRespose: true })(request, response, next);

      response.serverError();

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'unexpected-internal-server-error',
          correlationId: 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          statusCode: 500,
          details: [
            {
              name: 'unexpected-server-error',
              message: 'Please contact administrator and present correlation identifier for troubleshooting',
            },
          ],
        },
      ]);
    });

    it('should return response if only error pass as a argument', () => {
      middleware()(request, response, next);

      response.serverError('TypeError: this.services.forms.save is not a function');

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'unexpected-internal-server-error',
          correlationId: 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          details: [
            {
              name: 'unexpected-server-error',
              message: 'Please contact administrator and present correlation identifier for troubleshooting',
            },
          ],
        },
      ]);
    });

    it('should return response with statusCode if only error pass as a argument', () => {
      middleware({ sendStatusCodeinRespose: true })(request, response, next);

      response.serverError('TypeError: this.services.forms.save is not a function');

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'unexpected-internal-server-error',
          correlationId: 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          statusCode: 500,
          details: [
            {
              name: 'unexpected-server-error',
              message: 'Please contact administrator and present correlation identifier for troubleshooting',
            },
          ],
        },
      ]);
    });

    it('should return response if only message pass as a argument', () => {
      middleware()(request, response, next);

      response.serverError(null, [
        {
          name: 'unexpected-server-error2',
          message: 'Please contact administrator',
        },
      ]);

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'unexpected-internal-server-error',
          correlationId: 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          details: [
            {
              name: 'unexpected-server-error2',
              message: 'Please contact administrator',
            },
          ],
        },
      ]);
    });

    it('should return response with statusCode if only message pass as a argument', () => {
      middleware({ sendStatusCodeinRespose: true })(request, response, next);

      response.serverError(null, [
        {
          name: 'unexpected-server-error2',
          message: 'Please contact administrator',
        },
      ]);

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'unexpected-internal-server-error',
          correlationId: 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          statusCode: 500,
          details: [
            {
              name: 'unexpected-server-error2',
              message: 'Please contact administrator',
            },
          ],
        },
      ]);
    });

    it('should return response if message and error pass as a argument', () => {
      middleware()(request, response, next);

      response.serverError('TypeError: this.services.forms.save is not a function', [
        {
          name: 'unexpected-server-error2',
          message: 'Please contact administrator',
        },
      ]);

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'unexpected-internal-server-error',
          correlationId: 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          details: [
            {
              name: 'unexpected-server-error2',
              message: 'Please contact administrator',
            },
          ],
        },
      ]);
    });

    it('should return response if message and error pass as a argument with statusCode', () => {
      middleware({ sendStatusCodeinRespose: true })(request, response, next);

      response.serverError('TypeError: this.services.forms.save is not a function', [
        {
          name: 'unexpected-server-error2',
          message: 'Please contact administrator',
        },
      ]);

      expect(response.json.args[0]).to.be.deep.equal([
        {
          type: 'unexpected-internal-server-error',
          correlationId: 'f9acf5e0-7ab4-11e8-adc0-fa7ae01bbebc',
          statusCode: 500,
          details: [
            {
              name: 'unexpected-server-error2',
              message: 'Please contact administrator',
            },
          ],
        },
      ]);
    });
  });

  context('postSuccessfully method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.postSuccessfully).not.to.be.undefined;
    });

    it('should return status 201', () => {
      middleware()(request, response, next);

      response.postSuccessfully();

      expect(response.status.getCall(0).args[0]).to.equal(201);
    });

    it('should return 201 response body as defined', () => {
      middleware()(request, response, next);

      response.postSuccessfully();

      expect(response.json.args[0]).to.be.deep.equal([{ statusCode: 201 }]);
    });

    it('should return 201 response body as defined', () => {
      middleware()(request, response, next);

      response.postSuccessfully({ data: { userId:1 },message:'' });

      expect(response.json.args[0]).to.be.deep.equal([{ statusCode: 201,data: { userId:1 }, message: '' }]);
    });
  });

  context('getSuccessfully method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.getSuccessfully).not.to.be.undefined;
    });

    it('should return status 200', () => {
      middleware()(request, response, next);

      response.getSuccessfully();

      expect(response.status.getCall(0).args[0]).to.equal(200);
    });

    it('should return 200 response body as defined', () => {
      middleware()(request, response, next);

      response.getSuccessfully();

      expect(response.json.args[0]).to.be.deep.equal([{ statusCode: 200 }]);
    });

    it('should return 200 response body as defined', () => {
      middleware()(request, response, next);

      response.getSuccessfully({ data: { userId:1 },message:'' });

      expect(response.json.args[0]).to.be.deep.equal([{ statusCode: 200,data: { userId:1 }, message: '' }]);
    });
  });

  context('getRequest method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.getRequest).not.to.be.undefined;
    });

    it('should return status 200', () => {
      middleware()(request, response, next);

      response.getRequest();

      expect(response.status.getCall(0).args[0]).to.equal(200);
    });

    it('should return 200 response body as defined', () => {
      middleware()(request, response, next);

      response.getRequest({ name:'John Dow' });

      expect(response.json.args[0]).to.be.deep.equal([{ name:'John Dow' }]);
    });
  });

  context('postRequest method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.postRequest).not.to.be.undefined;
    });

    it('should return status 201', () => {
      middleware()(request, response, next);

      response.postRequest();

      expect(response.status.getCall(0).args[0]).to.equal(201);
    });

    it('should return 201 response body as defined', () => {
      middleware()(request, response, next);

      response.postRequest();

      expect(response.json.args[0]).to.be.deep.equal([ ]);
    });

  });

  context('updated method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.updated).not.to.be.undefined;
    });

    it('should return status 201', () => {
      middleware()(request, response, next);

      response.updated();

      expect(response.status.getCall(0).args[0]).to.equal(204);
    });

    it('should return 204 response body as defined', () => {
      middleware()(request, response, next);

      response.updated();

      expect(response.json.args[0]).to.be.deep.equal([ ]);
    });

  });

  context('deleted method', () => {
    it('should not be undefined', () => {
      middleware()(request, response, next);

      expect(response.deleted).not.to.be.undefined;
    });

    it('should return status 201', () => {
      middleware()(request, response, next);

      response.deleted();

      expect(response.status.getCall(0).args[0]).to.equal(204);
    });

    it('should return 204 response body as defined', () => {
      middleware()(request, response, next);

      response.deleted();

      expect(response.json.args[0]).to.be.deep.equal([ ]);
    });

  });
});
