{"version":3,"names":["ruleComposer","require","eslint","rule","Linter","getRules","get","isDecorator","node","parent","type","module","exports","filterReports","problem"],"sources":["../../src/rules/new-cap.cjs"],"sourcesContent":["const ruleComposer = require(\"eslint-rule-composer\");\nconst eslint = require(\"eslint\");\n\nconst rule = new eslint.Linter().getRules().get(\"new-cap\");\n\n/**\n * Returns whether a node is under a decorator or not.\n * @param  {ASTNode}  node CallExpression node\n * @returns {Boolean} Returns true if the node is under a decorator.\n */\nfunction isDecorator(node) {\n  return node.parent.type === \"Decorator\";\n}\n\nmodule.exports = ruleComposer.filterReports(\n  rule,\n  problem => !isDecorator(problem.node),\n);\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAME,IAAI,GAAG,IAAID,MAAM,CAACE,MAAX,GAAoBC,QAApB,GAA+BC,GAA/B,CAAmC,SAAnC,CAAb;;AAOA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;EACzB,OAAOA,IAAI,CAACC,MAAL,CAAYC,IAAZ,KAAqB,WAA5B;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBZ,YAAY,CAACa,aAAb,CACfV,IADe,EAEfW,OAAO,IAAI,CAACP,WAAW,CAACO,OAAO,CAACN,IAAT,CAFR,CAAjB"}